!function () { "Use Strict"; function a(a, b) { var c = Math.max(e.rules.length - 1, 0); return e.insertRule ? e.insertRule(a + "{" + b + "}", c) : e.addRule(a, b, c), c } function b(a) { e.removeRule ? e.removeRule(a) : e.deleteRule(a) } function c(a, b) { if (!a || "" === a || g.hasOwnProperty(a)) throw "textAngular Error: A unique name is required for a Tool Definition"; if (b.display && ("" === b.display || 0 === angular.element(b.display).length) || !b.display && !b.buttontext && !b.iconclass) throw 'textAngular Error: Tool Definition for "' + a + '" does not have a valid display/iconclass/buttontext value'; g[a] = b } var d = function () { var a, b = -1, c = window.navigator.userAgent, d = c.indexOf("MSIE "), e = c.indexOf("Trident/"); if (d > 0) b = parseInt(c.substring(d + 5, c.indexOf(".", d)), 10); else if (e > 0) { var f = c.indexOf("rv:"); b = parseInt(c.substring(f + 3, c.indexOf(".", f)), 10) } return b > -1 ? b : a }(), e = function () { var a = document.createElement("style"); return a.appendChild(document.createTextNode("")), document.head.appendChild(a), a.sheet }(), f = angular.module("textAngular", ["ngSanitize"]); f.value("taOptions", { toolbar: [["h1", "h2", "h3", "h4", "h5", "h6", "p", "pre", "quote"], ["bold", "italics", "underline", "ul", "ol", "redo", "undo", "clear"], ["justifyLeft", "justifyCenter", "justifyRight"], ["html", "insertImage", "insertLink", "insertVideo"]], classes: { focussed: "focussed", toolbar: "btn-toolbar", toolbarGroup: "btn-group", toolbarButton: "btn btn-default", toolbarButtonActive: "active", disabled: "disabled", textEditor: "form-control", htmlEditor: "form-control" }, setup: { textEditorSetup: function () { }, htmlEditorSetup: function () { } } }), f.value("taSelectableElements", ["a", "img", "div"]); var g = {}; f.constant("taRegisterTool", c), f.value("taTools", g), f.run(["taRegisterTool", "$window", function (a, b) { angular.forEach(g, function (a, b) { delete g[b] }), a("html", { buttontext: "Toggle HTML", action: function () { this.$editor().switchView() }, activeState: function () { return this.$editor().showHtml } }); var c = function (a) { return function () { return this.$editor().queryFormatBlockState(a) } }, d = function () { return this.$editor().wrapSelection("formatBlock", "<" + this.name.toUpperCase() + ">") }; angular.forEach(["h1", "h2", "h3", "h4", "h5", "h6"], function (b) { a(b.toLowerCase(), { buttontext: b.toUpperCase(), action: d, activeState: c(b.toLowerCase()) }) }), a("p", { buttontext: "P", action: function () { return this.$editor().wrapSelection("formatBlock", "<P>") }, activeState: function () { return this.$editor().queryFormatBlockState("p") } }), a("pre", { buttontext: "pre", action: function () { return this.$editor().wrapSelection("formatBlock", "<PRE>") }, activeState: function () { return this.$editor().queryFormatBlockState("pre") } }), a("ul", { iconclass: "fa fa-list-ul", action: function () { return this.$editor().wrapSelection("insertUnorderedList", null) }, activeState: function () { return document.queryCommandState("insertUnorderedList") } }), a("ol", { iconclass: "fa fa-list-ol", action: function () { return this.$editor().wrapSelection("insertOrderedList", null) }, activeState: function () { return document.queryCommandState("insertOrderedList") } }), a("quote", { iconclass: "fa fa-quote-right", action: function () { return this.$editor().wrapSelection("formatBlock", "<BLOCKQUOTE>") }, activeState: function () { return this.$editor().queryFormatBlockState("blockquote") } }), a("undo", { iconclass: "fa fa-undo", action: function () { return this.$editor().wrapSelection("undo", null) } }), a("redo", { iconclass: "fa fa-repeat", action: function () { return this.$editor().wrapSelection("redo", null) } }), a("bold", { iconclass: "fa fa-bold", action: function () { return this.$editor().wrapSelection("bold", null) }, activeState: function () { return document.queryCommandState("bold") }, commandKeyCode: 98 }), a("justifyLeft", { iconclass: "fa fa-align-left", action: function () { return this.$editor().wrapSelection("justifyLeft", null) }, activeState: function (a) { var b = !1; return a && (b = "left" === a.css("text-align") || "left" === a.attr("align") || "right" !== a.css("text-align") && "center" !== a.css("text-align") && !document.queryCommandState("justifyRight") && !document.queryCommandState("justifyCenter")), b = b || document.queryCommandState("justifyLeft") } }), a("justifyRight", { iconclass: "fa fa-align-right", action: function () { return this.$editor().wrapSelection("justifyRight", null) }, activeState: function (a) { var b = !1; return a && (b = "right" === a.css("text-align")), b = b || document.queryCommandState("justifyRight") } }), a("justifyCenter", { iconclass: "fa fa-align-center", action: function () { return this.$editor().wrapSelection("justifyCenter", null) }, activeState: function (a) { var b = !1; return a && (b = "center" === a.css("text-align")), b = b || document.queryCommandState("justifyCenter") } }), a("italics", { iconclass: "fa fa-italic", action: function () { return this.$editor().wrapSelection("italic", null) }, activeState: function () { return document.queryCommandState("italic") }, commandKeyCode: 105 }), a("underline", { iconclass: "fa fa-underline", action: function () { return this.$editor().wrapSelection("underline", null) }, activeState: function () { return document.queryCommandState("underline") }, commandKeyCode: 117 }), a("clear", { iconclass: "fa fa-ban", action: function (a, b) { this.$editor().wrapSelection("removeFormat", null); var c = []; if (this.$window.rangy && this.$window.rangy.getSelection && 1 === (c = this.$window.rangy.getSelection().getAllRanges()).length) { var d = angular.element(c[0].commonAncestorContainer), e = function (a) { a = angular.element(a); var b = a; angular.forEach(a.children(), function (a) { var c = angular.element("<p></p>"); c.html(angular.element(a).html()), b.after(c), b = c }), a.remove() }; angular.forEach(d.find("ul"), e), angular.forEach(d.find("ol"), e); var f = this.$editor(), g = function (a) { a = angular.element(a), a[0] !== f.displayElements.text[0] && a.removeAttr("class"), angular.forEach(a.children(), g) }; angular.forEach(d, g), "li" !== d[0].tagName.toLowerCase() && "ol" !== d[0].tagName.toLowerCase() && "ul" !== d[0].tagName.toLowerCase() && this.$editor().wrapSelection("formatBlock", "<p>") } else this.$editor().wrapSelection("formatBlock", "<p>"); b() } }), a("insertImage", { iconclass: "fa fa-picture-o", action: function () { var a; return a = b.prompt("Please enter an image URL to insert", "http://"), a && "" !== a && "http://" !== a ? this.$editor().wrapSelection("insertImage", a, !0) : void 0 } }), a("insertVideo", { iconclass: "fa fa-youtube-play", action: function () { var a; if (a = b.prompt("Please enter a youtube URL to embed", "http://"), a && "" !== a && "http://" !== a) { var c = a.match(/(\?|&)v=[^&]*/); if (c.length > 0) { var d = "http://www.youtube.com/embed/" + c[0].substring(3), e = '<div class="ta-insert-video" style="padding:20px"><iframe src="' + d + '" allowfullscreen="true" width="300" frameborder="0" height="250"></iframe></div>'; return this.$editor().wrapSelection("insertHTML", e, !0) } } } }), a("insertLink", { iconclass: "fa fa-link", action: function () { var a; return a = b.prompt("Please enter an URL to insert", "http://"), a && "" !== a && "http://" !== a ? this.$editor().wrapSelection("createLink", a, !0) : void 0 }, activeState: function (a) { return a ? "A" === a[0].tagName : !1 }, onElementSelect: { element: "a", action: function (a, c, d) { a.preventDefault(); var e = d.displayElements.popoverContainer; e.empty(), e.css("line-height", "28px"); var f = angular.element('<a href="' + c.attr("href") + '" target="_blank">' + c.attr("href") + "</a>"); f.css({ display: "inline-block", "max-width": "200px", overflow: "hidden", "text-overflow": "ellipsis", "white-space": "nowrap", "vertical-align": "middle" }), e.append(f); var g = angular.element('<div class="btn-group pull-right">'), h = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on"><i class="fa fa-edit icon-edit"></i></button>'); h.on("click", function (a) { a.preventDefault(); var e = b.prompt("Please enter an URL to insert", c.attr("href")); "" !== e && (c.attr("href", e), d.updateTaBindtaTextElement()), d.hidePopover() }), g.append(h); var i = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on"><i class="fa fa-unlink icon-unlink"></i></button>'); i.on("click", function (a) { a.preventDefault(), c.replaceWith(c.contents()), d.updateTaBindtaTextElement(), d.hidePopover() }), g.append(i), e.append(g), d.showPopover(c) } } }) }]), f.directive("textAngular", ["$compile", "$timeout", "taOptions", "taSanitize", "textAngularManager", "$window", "$animate", function (a, b, c, d, e, f, g) { return { require: "?ngModel", scope: {}, restrict: "EA", link: function (d, h, i, j) { var k, l, m, n, o, p, q, r, s = Math.floor(1e16 * Math.random()), t = i.name ? i.name : "textAngularEditor" + s; angular.extend(d, angular.copy(c), { wrapSelection: function (a, b, c) { try { document.execCommand(a, !1, b) } catch (e) { } c && d["reApplyOnSelectorHandlerstaTextElement" + s](), d.displayElements.text[0].focus() }, showHtml: !1 }), i.taFocussedClass && (d.classes.focussed = i.taFocussedClass), i.taTextEditorClass && (d.classes.textEditor = i.taTextEditorClass), i.taHtmlEditorClass && (d.classes.htmlEditor = i.taHtmlEditorClass), i.taTextEditorSetup && (d.setup.textEditorSetup = d.$parent.$eval(i.taTextEditorSetup)), i.taHtmlEditorSetup && (d.setup.htmlEditorSetup = d.$parent.$eval(i.taHtmlEditorSetup)), q = h[0].innerHTML, h[0].innerHTML = "", d.displayElements = { forminput: angular.element("<input type='hidden' tabindex='-1' style='display: none;'>"), html: angular.element("<textarea></textarea>"), text: angular.element("<div></div>"), popover: angular.element('<div class="popover fade bottom" style="max-width: none; width: 305px;"><div class="arrow"></div></div>'), popoverContainer: angular.element('<div class="popover-content"></div>') }, d.displayElements.popover.append(d.displayElements.popoverContainer), h.append(d.displayElements.popover), d.displayElements.popover.on("mousedown", function (a) { return a.preventDefault(), !1 }), d.showPopover = function (a) { d.displayElements.popover.css("top", a[0].offsetTop + a[0].offsetHeight + "px"), d.displayElements.popover.css("left", a[0].offsetLeft + a[0].offsetWidth / 2 - 152.5 + "px"), d.displayElements.popover.css("display", "block"), g.addClass(d.displayElements.popover, "in"), b(function () { d.displayElements.html.parent().one("click", d.hidePopover) }, 100) }, d.hidePopover = function () { g.removeClass(d.displayElements.popover, "in", function () { d.displayElements.popover.css("display", ""), d.displayElements.popoverContainer.attr("style", ""), d.displayElements.popoverContainer.attr("class", "popover-content") }) }, d.setup.htmlEditorSetup(d.displayElements.html), d.setup.textEditorSetup(d.displayElements.text), d.displayElements.html.attr({ id: "taHtmlElement" + s, "ng-show": "showHtml", "ta-bind": "ta-bind", "ng-model": "html" }), d.displayElements.text.attr({ id: "taTextElement" + s, contentEditable: "true", "ng-hide": "showHtml", "ta-bind": "ta-bind", "ng-model": "html" }), h.append(d.displayElements.text), h.append(d.displayElements.html), d.displayElements.forminput.attr("name", t), h.append(d.displayElements.forminput), i.tabindex && (h.removeAttr("tabindex"), d.displayElements.text.attr("tabindex", i.tabindex), d.displayElements.html.attr("tabindex", i.tabindex)), i.placeholder && (d.displayElements.text.attr("placeholder", i.placeholder), d.displayElements.html.attr("placeholder", i.placeholder)), i.taDisabled && (d.displayElements.text.attr("ta-readonly", "disabled"), d.displayElements.html.attr("ta-readonly", "disabled"), d.disabled = d.$parent.$eval(i.taDisabled), d.$parent.$watch(i.taDisabled, function (a) { d.disabled = a, d.disabled ? h.addClass(d.classes.disabled) : h.removeClass(d.classes.disabled) })), a(d.displayElements.text)(d), a(d.displayElements.html)(d), d.updateTaBindtaTextElement = d["updateTaBindtaTextElement" + s], d.updateTaBindtaHtmlElement = d["updateTaBindtaHtmlElement" + s], h.addClass("ta-root"), d.displayElements.text.addClass("ta-text ta-editor " + d.classes.textEditor), d.displayElements.html.addClass("ta-html ta-editor " + d.classes.textEditor), d._actionRunning = !1; var u = !1; if (d.startAction = function () { return d._actionRunning = !0, f.rangy && f.rangy.saveSelection ? (u = f.rangy.saveSelection(), function () { u && f.rangy.restoreSelection(u) }) : void 0 }, d.endAction = function () { d._actionRunning = !1, u && f.rangy.removeMarkers(u), u = !1, d.updateSelectedStyles(), d.showHtml || d["updateTaBindtaTextElement" + s]() }, o = function () { h.addClass(d.classes.focussed), r.focus() }, d.displayElements.html.on("focus", o), d.displayElements.text.on("focus", o), p = function (a) { return d._actionRunning || document.activeElement === d.displayElements.html[0] || document.activeElement === d.displayElements.text[0] || (h.removeClass(d.classes.focussed), r.unfocus(), b(function () { h.triggerHandler("blur") }, 0)), a.preventDefault(), !1 }, d.displayElements.html.on("blur", p), d.displayElements.text.on("blur", p), d.queryFormatBlockState = function (a) { return a.toLowerCase() === document.queryCommandValue("formatBlock").toLowerCase() }, d.switchView = function () { d.showHtml = !d.showHtml, d.showHtml ? b(function () { return d.displayElements.html[0].focus() }, 100) : b(function () { return d.displayElements.text[0].focus() }, 100) }, i.ngModel) { var v = !0; j.$render = function () { if (v) { v = !1; var a = d.$parent.$eval(i.ngModel); void 0 !== a && null !== a || !q || "" === q || j.$setViewValue(q) } d.displayElements.forminput.val(j.$viewValue), d._elementSelectTriggered || document.activeElement === d.displayElements.html[0] || document.activeElement === d.displayElements.text[0] || (d.html = j.$viewValue || "") } } else d.displayElements.forminput.val(q), d.html = q; if (d.$watch("html", function (a, b) { a !== b && (i.ngModel && j.$viewValue !== a && j.$setViewValue(a), d.displayElements.forminput.val(a)) }), i.taTargetToolbars) r = e.registerEditor(t, d, i.taTargetToolbars.split(",")); else { var w = angular.element('<div text-angular-toolbar name="textAngularToolbar' + s + '">'); i.taToolbar && w.attr("ta-toolbar", i.taToolbar), i.taToolbarClass && w.attr("ta-toolbar-class", i.taToolbarClass), i.taToolbarGroupClass && w.attr("ta-toolbar-group-class", i.taToolbarGroupClass), i.taToolbarButtonClass && w.attr("ta-toolbar-button-class", i.taToolbarButtonClass), i.taToolbarActiveButtonClass && w.attr("ta-toolbar-active-button-class", i.taToolbarActiveButtonClass), i.taFocussedClass && w.attr("ta-focussed-class", i.taFocussedClass), h.prepend(w), a(w)(d.$parent), r = e.registerEditor(t, d, ["textAngularToolbar" + s]) } d.$on("$destroy", function () { e.unregisterEditor(t) }), d.$on("ta-element-select", function (a, b) { r.triggerElementSelect(a, b) }), d._bUpdateSelectedStyles = !1, d.updateSelectedStyles = function () { var a; f.rangy && f.rangy.getSelection && 1 === (a = f.rangy.getSelection().getAllRanges()).length && a[0].commonAncestorContainer.parentNode !== d.displayElements.text[0] ? r.updateSelectedStyles(angular.element(a[0].commonAncestorContainer.parentNode)) : r.updateSelectedStyles(), d._bUpdateSelectedStyles && b(d.updateSelectedStyles, 200) }, k = function () { d._bUpdateSelectedStyles || (d._bUpdateSelectedStyles = !0, d.$apply(function () { d.updateSelectedStyles() })) }, d.displayElements.html.on("keydown", k), d.displayElements.text.on("keydown", k), l = function () { d._bUpdateSelectedStyles = !1 }, d.displayElements.html.on("keyup", l), d.displayElements.text.on("keyup", l), m = function (a) { d.$apply(function () { return r.sendKeyCommand(a) ? (d._bUpdateSelectedStyles || d.updateSelectedStyles(), a.preventDefault(), !1) : void 0 }) }, d.displayElements.html.on("keypress", m), d.displayElements.text.on("keypress", m), n = function () { d._bUpdateSelectedStyles = !1, d.$apply(function () { d.updateSelectedStyles() }) }, d.displayElements.html.on("mouseup", n), d.displayElements.text.on("mouseup", n) } } }]).directive("taBind", ["taSanitize", "$timeout", "taFixChrome", "taSelectableElements", function (c, e, f, g) { return { require: "ngModel", scope: {}, link: function (h, i, j, k) { var l = void 0 !== i.attr("contenteditable") && i.attr("contenteditable"), m = l || "textarea" === i[0].tagName.toLowerCase() || "input" === i[0].tagName.toLowerCase(), n = !1, o = !1, p = void 0 === d ? "<p><br></p>" : "<p></p>", q = function () { if (l) return i[0].innerHTML; if (m) return i.val(); throw "textAngular Error: attempting to update non-editable taBind" }; if (h.$parent["updateTaBind" + (j.id || "")] = function () { n || k.$setViewValue(q()) }, m) if (i.on("paste cut", function () { n || e(function () { k.$setViewValue(q()) }, 0) }), l) { if (i.on("keyup", function () { n || k.$setViewValue(q()) }), i.on("blur", function () { o = !1; var a = q(); n || k.$setViewValue(a === p ? "" : q()), k.$render() }), j.placeholder) { var r; if (!j.id) throw "textAngular Error: An unique ID is required for placeholders to work"; r = a("#" + j.id + ".placeholder-text:before", 'content: "' + j.placeholder + '"'), h.$on("$destroy", function () { b(r) }) } i.on("focus", function () { o = !0, k.$render() }) } else i.on("change blur", function () { n || k.$setViewValue(q()) }); var s = function (a) { return k.$oldViewValue = c(f(a), k.$oldViewValue) }; k.$parsers.push(s), k.$formatters.push(s); var t = function (a) { return h.$emit("ta-element-select", this), a.preventDefault(), !1 }; h.$parent["reApplyOnSelectorHandlers" + (j.id || "")] = function () { n || angular.forEach(g, function (a) { i.find(a).off("click", t).on("click", t) }) }, k.$render = function () { var a = k.$viewValue || ""; document.activeElement !== i[0] ? l ? (j.placeholder ? "" === a ? (o ? i.removeClass("placeholder-text") : i.addClass("placeholder-text"), i[0].innerHTML = p) : (i.removeClass("placeholder-text"), i[0].innerHTML = a) : i[0].innerHTML = "" === a ? p : a, n || angular.forEach(g, function (a) { i.find(a).on("click", t) })) : "textarea" !== i[0].tagName.toLowerCase() && "input" !== i[0].tagName.toLowerCase() ? i[0].innerHTML = a : i.val(a) : l && i.removeClass("placeholder-text") }, j.taReadonly && (n = h.$parent.$eval(j.taReadonly), n ? (("textarea" === i[0].tagName.toLowerCase() || "input" === i[0].tagName.toLowerCase()) && i.attr("disabled", "disabled"), void 0 !== i.attr("contenteditable") && i.attr("contenteditable") && i.removeAttr("contenteditable")) : "textarea" === i[0].tagName.toLowerCase() || "input" === i[0].tagName.toLowerCase() ? i.removeAttr("disabled") : l && i.attr("contenteditable", "true"), h.$parent.$watch(j.taReadonly, function (a, b) { b !== a && (a ? (("textarea" === i[0].tagName.toLowerCase() || "input" === i[0].tagName.toLowerCase()) && i.attr("disabled", "disabled"), void 0 !== i.attr("contenteditable") && i.attr("contenteditable") && i.removeAttr("contenteditable"), angular.forEach(g, function (a) { i.find(a).on("click", t) })) : ("textarea" === i[0].tagName.toLowerCase() || "input" === i[0].tagName.toLowerCase() ? i.removeAttr("disabled") : l && i.attr("contenteditable", "true"), angular.forEach(g, function (a) { i.find(a).off("click", t) })), n = a) })), l && !n && angular.forEach(g, function (a) { i.find(a).on("click", t) }) } } }]).factory("taFixChrome", function () { var a = function (a) { for (var b = angular.element("<div>" + a + "</div>"), c = angular.element(b).find("span"), d = 0; d < c.length; d++) { var e = angular.element(c[d]); e.attr("style") && e.attr("style").match(/line-height: 1.428571429;|color: inherit; line-height: 1.1;/i) && (e.attr("style", e.attr("style").replace(/( |)font-family: inherit;|( |)line-height: 1.428571429;|( |)line-height:1.1;|( |)color: inherit;/gi, "")), e.attr("style") && "" !== e.attr("style") || (e.next().length > 0 && "BR" === e.next()[0].tagName && e.next().remove(), e.replaceWith(e[0].innerHTML))) } var f = b[0].innerHTML.replace(/style="[^"]*?(line-height: 1.428571429;|color: inherit; line-height: 1.1;)[^"]*"/gi, ""); return f !== b[0].innerHTML && (b[0].innerHTML = f), b[0].innerHTML }; return a }).factory("taSanitize", ["$sanitize", function (a) { function b(a, c) { var d = [], e = a.children(); return e.length && angular.forEach(e, function (a) { d = d.concat(b(angular.element(a), c)) }), a.attr(c) && d.push(a), d } return function (c, d) { var e = angular.element("<div>" + c + "</div>"); angular.forEach(b(e, "align"), function (a) { a.css("text-align", a.attr("align")), a.removeAttr("align") }), c = e[0].innerHTML; var f; try { f = a(c) } catch (g) { f = d || "" } return f } }]).directive("textAngularToolbar", ["$compile", "textAngularManager", "taOptions", "taTools", "taToolExecuteAction", "$window", function (a, b, c, d, e, f) { return { scope: { name: "@" }, restrict: "EA", link: function (g, h, i) { if (!g.name || "" === g.name) throw "textAngular Error: A toolbar requires a name"; angular.extend(g, angular.copy(c)), i.taToolbar && (g.toolbar = g.$parent.$eval(i.taToolbar)), i.taToolbarClass && (g.classes.toolbar = i.taToolbarClass), i.taToolbarGroupClass && (g.classes.toolbarGroup = i.taToolbarGroupClass), i.taToolbarButtonClass && (g.classes.toolbarButton = i.taToolbarButtonClass), i.taToolbarActiveButtonClass && (g.classes.toolbarButtonActive = i.taToolbarActiveButtonClass), i.taFocussedClass && (g.classes.focussed = i.taFocussedClass), g.disabled = !0, g.focussed = !1, h[0].innerHTML = "", h.addClass("ta-toolbar " + g.classes.toolbar), g.$watch("focussed", function () { g.focussed ? h.addClass(g.classes.focussed) : h.removeClass(g.classes.focussed) }), setupToolElement = function (b, c) { var d; if (d = angular.element(b && b.display ? b.display : "<button type='button'>"), d.addClass(g.classes.toolbarButton), d.attr("name", c.name), d.attr("unselectable", "on"), d.attr("ng-disabled", "isDisabled()"), d.attr("tabindex", "-1"), d.attr("ng-click", "executeAction()"), d.attr("ng-class", "displayActiveToolClass(active)"), d.on("mousedown", function (a) { return a.preventDefault(), !1 }), b && !b.display && !c._display && (d[0].innerHTML = "", b.buttontext && (d[0].innerHTML = b.buttontext), b.iconclass)) { var e = angular.element("<i>"), f = d[0].innerHTML; e.addClass(b.iconclass), d[0].innerHTML = "", d.append(e), f && "" !== f && d.append("&nbsp;" + f) } return c._lastToolDefinition = angular.copy(b), a(d)(c) }, g.tools = {}, g._parent = { disabled: !0, showHtml: !1, queryFormatBlockState: function () { return !1 } }; var j = { $window: f, $editor: function () { return g._parent }, isDisabled: function () { return this.$eval("disabled") || this.$eval("disabled()") || "html" !== this.name && this.$editor().showHtml || this.$parent.disabled || this.$editor().disabled }, displayActiveToolClass: function (a) { return a ? g.classes.toolbarButtonActive : "" }, executeAction: e }; angular.forEach(g.toolbar, function (a) { groupElement = angular.element("<div>"), groupElement.addClass(g.classes.toolbarGroup), angular.forEach(a, function (a) { g.tools[a] = angular.extend(g.$new(!0), d[a], j, { name: a }), g.tools[a].$element = setupToolElement(d[a], g.tools[a]), groupElement.append(g.tools[a].$element) }), h.append(groupElement) }), g.updateToolDisplay = function (a, b, c) { var d = g.tools[a]; if (d) { if (d._lastToolDefinition && !c && (b = angular.extend({}, d._lastToolDefinition, b)), null === b.buttontext && null === b.iconclass && null === b.display) throw 'textAngular Error: Tool Definition for updating "' + a + '" does not have a valid display/iconclass/buttontext value'; null === b.buttontext && delete b.buttontext, null === b.iconclass && delete b.iconclass, null === b.display && delete b.display, toolElement = setupToolElement(b, d), d.$element.replaceWith(toolElement), d.$element = toolElement } }, b.registerToolbar(g), g.$on("$destroy", function () { b.unregisterToolbar(g.name) }) } } }]).service("taToolExecuteAction", ["$q", function (a) { return function (b) { void 0 !== b && (this.$editor = function () { return b }); var c = a.defer(), d = c.promise, e = this.$editor(); d["finally"](function () { e.endAction.call(e) }); var f; try { f = this.action(c, e.startAction()) } catch (g) { } (f || void 0 === f) && c.resolve() } }]).service("textAngularManager", ["taToolExecuteAction", function (a) { var b = {}, c = {}; return { registerEditor: function (d, e, f) { if (!d || "" === d) throw "textAngular Error: An editor requires a name"; if (!e) throw "textAngular Error: An editor requires a scope"; if (c[d]) throw 'textAngular Error: An Editor with name "' + d + '" already exists'; var h = []; return angular.forEach(f, function (a) { b[a] && h.push(b[a]) }), c[d] = { scope: e, toolbars: f, _registerToolbar: function (a) { this.toolbars.indexOf(a.name) >= 0 && h.push(a) }, editorFunctions: { disable: function () { angular.forEach(h, function (a) { a.disabled = !0 }) }, enable: function () { angular.forEach(h, function (a) { a.disabled = !1 }) }, focus: function () { angular.forEach(h, function (a) { a._parent = e, a.disabled = !1, a.focussed = !0 }) }, unfocus: function () { angular.forEach(h, function (a) { a.disabled = !0, a.focussed = !1 }) }, updateSelectedStyles: function (a) { angular.forEach(h, function (b) { angular.forEach(b.tools, function (b) { b.activeState && (b.active = b.activeState(a)) }) }) }, sendKeyCommand: function (b) { var c = !1; return (b.ctrlKey || b.metaKey) && angular.forEach(g, function (d, f) { if (d.commandKeyCode && d.commandKeyCode === b.which) for (var g = 0; g < h.length; g++) if (void 0 !== h[g].tools[f]) { a.call(h[g].tools[f], e), c = !0; break } }), c }, triggerElementSelect: function (a, b) { var c = !1; return b = angular.element(b), angular.forEach(g, function (d, f) { if (d.onElementSelect && d.onElementSelect.element && d.onElementSelect.element.toLowerCase() === b[0].tagName.toLowerCase() && (!d.onElementSelect.filter || d.onElementSelect.filter(b))) for (var g = 0; g < h.length; g++) if (void 0 !== h[g].tools[f]) { d.onElementSelect.action.call(h[g].tools[f], a, b, e), c = !0; break } }), c } } }, c[d].editorFunctions }, retrieveEditor: function (a) { return c[a] }, unregisterEditor: function (a) { delete c[a] }, registerToolbar: function (a) { if (!a) throw "textAngular Error: A toolbar requires a scope"; if (!a.name || "" === a.name) throw "textAngular Error: A toolbar requires a name"; if (b[a.name]) throw 'textAngular Error: A toolbar with name "' + a.name + '" already exists'; b[a.name] = a, angular.forEach(c, function (b) { b._registerToolbar(a) }) }, retrieveToolbar: function (a) { return b[a] }, retrieveToolbarsViaEditor: function (a) { var b = [], c = this; return angular.forEach(this.retrieveEditor(a).toolbars, function (a) { b.push(c.retrieveToolbar(a)) }), b }, unregisterToolbar: function (a) { delete b[a] }, updateToolsDisplay: function (a) { var b = this; angular.forEach(a, function (a, c) { b.updateToolDisplay(c, a) }) }, resetToolsDisplay: function () { var a = this; angular.forEach(g, function (b, c) { a.resetToolDisplay(c) }) }, updateToolDisplay: function (a, c) { var d = this; angular.forEach(b, function (b, e) { d.updateToolbarToolDisplay(e, a, c) }) }, resetToolDisplay: function (a) { var c = this; angular.forEach(b, function (b, d) { c.resetToolbarToolDisplay(d, a) }) }, updateToolbarToolDisplay: function (a, c, d) { if (!b[a]) throw 'textAngular Error: No Toolbar with name "' + a + '" exists'; b[a].updateToolDisplay(c, d) }, resetToolbarToolDisplay: function (a, c) { if (!b[a]) throw 'textAngular Error: No Toolbar with name "' + a + '" exists'; b[a].updateToolDisplay(c, g[c], !0) }, refreshEditor: function (a) { if (!c[a]) throw 'textAngular Error: No Editor with name "' + a + '" exists'; c[a].scope.updateTaBindtaTextElement(), c[a].scope.$$phase || c[a].scope.$digest() } } }]) }();